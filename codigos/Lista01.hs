import Data.Char (digitToInt) {-ExercÃ­cio 11-}

f1 :: Double -> Maybe Double
f1 x
  | x >= 0     = Just ((x + 4) / (x + 2))
  | x < 0     = Just (2 / x)
  | otherwise = Nothing
{-Precisa do otherwise? NecessÃ¡rio para retornar nothing quando a divisÃ£o for por 0-}

f2 :: Double -> Double -> Double
f2 x y
  | x >= y    = x + y
  | otherwise = x - y

f3 :: Double -> Double -> Double -> Double
f3 x y z
  | (x+y)>z = x+y+z
  | (x+y)<z = x-y-z
  | (x+y)==z = 0

{-
FunÃ§Ã£o com problema de recursÃ£o infinita, nesse caso ela deveria parar quando o nÃºmero for 0.
fat :: Int->Int
fat x = x * fat(x-1)
-}

{- Com a implementaÃ§Ã£o de uma claÃºsula de parada-}
fat :: Int -> Int
fat 0 = 1
fat x = x * fat (x - 1)

soma :: Int -> Int -> Int 
soma x y = x + y

mult :: Int -> Int -> Int
mult x y
  | y == 0    = 0
  | otherwise = soma x (mult x (y-1))

invertInt :: Int -> Int
invertInt n = read (reverse (show n)) :: Int

{-
invertInt :: Int -> Int
invertInt n = go n 0
  where
    go 0 acc = acc
    go n acc = go (n `div` 10) (acc * 10 + (n `mod` 10))
-}
{-Num a sifnigica que a funÃ§Ã£o funciona com qualquer tipo numÃ©rico-}
square :: Num a => a -> a
square x = x * x

fourPower :: Num a => a -> a
fourPower x = square (square x)

sqrtSeq :: Int -> Double
sqrtSeq 0 = sqrt 6
sqrtSeq i = sqrtSeq (i-1) + sqrt 6

choose :: Integer -> Integer -> Integer
choose m n
  | n == 0 || n == m = 1
  | n > m = 0
  | otherwise = choose (m-1) (n-1) + choose (m-1) n

{-8: mdc com recursÃ£o
A funÃ§Ã£o recebe dois argumentos m e n
A primeira linha define uma condiÃ§Ã£o para parada, se n for igual a 0, entÃ£o MDC Ã© m
Caso contrÃ¡rio a recursÃ£o continua passando n como primeiro argumento e o resto da divisÃ£o de m por n como segundo argumento-}
mdc :: Int -> Int -> Int
mdc m n
  | n == 0 = m
  | otherwise = mdc n (m `mod`n)

{-9: Quantos mÃºltiplos um inteiro tem em um intervalo
-}

howManyMultiples :: Int -> Int -> Int -> Int 
howManyMultiples n start end = length [x | x <- [start..end], x `mod` n == 0]

ultimoDigito :: Int -> Int
ultimoDigito x = read [last(show x)]
{-Aqui Ã© convertido o nÃºmero em string com a funÃ§Ã£o show e a funÃ§Ã£o last retorna o Ãºltimo caractere, com read converte de volta para inteiro-}

{-
ultimoDigito :: Int -> Int
ultimoDigito n = n `mod` 10

aqui o operador % retorna o resto da divisÃ£o de n por 10 que serÃ¡ o Ãºltimo digito
-}

anyDigit :: Int -> Int -> Int
anyDigit pos num
  | pos < 0 = -1
  | num < 0 = anyDigit pos (abs num) -- tratando nÃºmeros negativos
  | otherwise = anyDigitHelper pos (show num)

anyDigitHelper :: Int -> String -> Int
anyDigitHelper pos numStr
  | length numStr <= pos = -1
  | otherwise = digitToInt (numStr !! pos)

{-
ExplicaÃ§Ã£o da implementaÃ§Ã£o:

A funÃ§Ã£o "anyDigit" recebe dois argumentos: "pos", que indica a posiÃ§Ã£o do dÃ­gito a ser retornado (comeÃ§ando em 0), e "num", que Ã© o nÃºmero inteiro do qual se deseja extrair o dÃ­gito.

O primeiro caso da clÃ¡usula "guarda" (guard) verifica se a posiÃ§Ã£o Ã© negativa. Se for, a funÃ§Ã£o retorna -1, indicando que a posiÃ§Ã£o Ã© invÃ¡lida.

O segundo caso da clÃ¡usula "guarda" verifica se o nÃºmero Ã© negativo. Se for, a funÃ§Ã£o chama a si mesma com o valor absoluto de "num", para tratar nÃºmeros negativos.

O terceiro caso da clÃ¡usula "guarda" Ã© executado se os casos anteriores nÃ£o forem atendidos. Essa clÃ¡usula chama a funÃ§Ã£o auxiliar "anyDigitHelper", que recebe a posiÃ§Ã£o e uma representaÃ§Ã£o em string do nÃºmero ("show num") e retorna o dÃ­gito correspondente, convertendo-o para inteiro com a funÃ§Ã£o "digitToInt". Se a posiÃ§Ã£o for invÃ¡lida (maior ou igual ao tamanho da string), a funÃ§Ã£o retorna -1.

A funÃ§Ã£o auxiliar "anyDigitHelper" recebe a posiÃ§Ã£o e a string do nÃºmero como argumentos. O primeiro caso da clÃ¡usula "guarda" verifica se a posiÃ§Ã£o Ã© maior ou igual ao tamanho da string. Se for, a funÃ§Ã£o retorna -1. Caso contrÃ¡rio, a funÃ§Ã£o utiliza a funÃ§Ã£o "!!" para obter o caractere na posiÃ§Ã£o desejada, e em seguida a funÃ§Ã£o "digitToInt" para convertÃª-lo em inteiro.
-}

{-
12. Um programador especicou a funÃ§Ã£o allDierent para identicar se trÃªs nÃºmeros inteiros sÃ£o
todos diferentes entre si, da seguinte forma:
allDifferent::Int->Int->Int->Bool
allDifferent m n p = (m/=n) && (n/=p)

(a) O que estÃ¡ errado nessa deniÃ§Ã£o?
(b) Especique corretamente uma funÃ§Ã£o allDierent para o propÃ³sito necessÃ¡rio.
-}

{-
13. Escreva uma funÃ§Ã£o howManyEqual que retorne quantos dos trÃªs nÃºmeros inteiros fornecidos
como argumentos sÃ£o iguais. A resposta poderÃ¡ ser 3 (todos iguais), 2 (dois iguais e o terceiro
diferente) ou 0 (todos diferentes).
howManyEqual::Int->Int->Int->Int
-}

{-
14.Para o exemplo da funÃ§Ã£o sales::Int->Int dada em sala de aula faÃ§a o que se pede:
(a) Implemente a funÃ§Ã£o howManyLess que calcule quantos dias as vendas foram inferiores
a um dado valor, dentro de um intervalo de dias dentro do perÃ­odo total. O primeiro
parÃ¢metro de howManyLess indica o valor mÃ­nimo de vendas, o segundo parÃ¢metro indica
o dia do inÃ­cio do intervalo e o terceiro parÃ¢metro Ã© o dia do m do intervalo desejado
dentro do perÃ­odo total de dias da funÃ§Ã£o;
{-parameters: value; interval beginning; interval ending; return value-}
howManyLess::Int->Int->Int->Int
(b) Implemente a funÃ§Ã£o noZeroInPeriod::Int->Bool que retorna True somente se nÃ£o hÃ¡
nenhum dia no perÃ­odo em que o nÃºmero de vendas da funÃ§Ã£o sales foi zero.
(c) Implemente a funÃ§Ã£o zerosInPeriod::[Int] que retorne a lista de todos os dias em que as
vendas foram de zero unidades;
(d) Utilizando listas de inteiros, retorne os dias em que as vendas foram abaixo de um deter-
minado valor passado como parÃ¢metro;
-}

{-
15. A sequencia de Fibonacci Ã© denida e conhecida na literatura. Os dois primeiros nÃºmeros sÃ£o
0 e 1, e os seguintes sÃ£o calculados como a soma dos dois anteriores na sequÃªncia. Dena a
funÃ§Ã£o antFib que, dado um valor x, calcule a posiÃ§Ã£o de x na sequencia de Fibonacci. Caso x
nÃ£o esteja na sequÃªncia, retorne (-1).
{-exemplo-}
Main> antFib 13 = 7
-}

{-
16. Escreva uma deniÃ§Ã£o equivalente Ã  exibida abaixo, mas usando apenas uma Ãºnica clÃ¡usula
em casamento de padrÃ£o:
funny x y z
  | x > z = True
  | y >= x = False
  | otherwise = True
-}

{-
17. Implemente uma funÃ§Ã£o que converte uma letra minÃºsculas como entrada para seu equiva-
lente em maiÃºsculo. Caso a entrada nÃ£o seja uma letra minÃºscula, retorne o prÃ³prio car-
actere de entrada. Como dica, veja a funÃ§Ã£o predenida isLower::Char->Bool. Para veri-
car outras funÃ§Ãµes prÃ©-denidas para o tipo Char, consulte a biblioteca padrÃ£o no endereÃ§o
http://zvon.org/other/haskell/Outputglobal/index.html.
-}

{-
18. Defina uma funÃ§Ã£o charToNum::Char->Int que converte um dÃ­gito numÃ©rico do tipo Char
(como Â´3Â´) para o valor que ele representa em Int, (3). Se o caractere de entrada nÃ£o representa
um dÃ­gito numÃ©rico, a funÃ§Ã£o deve retornar -1. Como dica, veja as funÃ§Ãµes isDigit, chr e ord
do mÃ³dulo Data.Char.
-}

{-
19. Implemente a funÃ§Ã£o duplicate::String->Int->String que recebe uma string s e um nÃºmero
inteiro n. A funÃ§Ã£o deve retornar a concatenaÃ§Ã£o de n cÃ³pias de s. Se n for zero, retorna "".
Como dica, usar o operador de concatenaÃ§Ã£o prÃ©-denido (++)::String->String->String.
-}

{-
20. Implemente a funÃ§Ã£o pushRight::String->Int->String que recebe uma string s e um nÃºmero
inteiro n e retorna uma nova string t com k caracteres '>' inseridos no inÃ­cio de s. O valor de
k deve ser tal que o comprimento de t seja igual a n. Obs: se n Ã© menor que o comprimento
de s, a funÃ§Ã£o retorna a prÃ³pria string s.
{-exemplo-}
Main> pushRight "abc" 5 = ">>abc"
-}

{-
21. Defina um operador binÃ¡rio de nome &-, com a semÃ¢ntica: x &- y = x - 2*y.
Âˆ Qual Ã© o resultado da avaliaÃ§Ã£o da expressÃ£o 10 &- 3 &- 2, se o operador for definido
como: (a) infixl 6 &-; (b) infixr 6 &-; e (c) infix 6 &- ? Explique esses resultados.
Âˆ Qual Ã© o resultado da avaliaÃ§Ã£o da expressÃ£o 10 &- 3 * 2, caso o operador seja definido
como: (a) infix 6 &-; e (b) infix 8 &- ? Explique esses resultados.
-}

{-
22. FaÃ§a em Haskell uma soluÃ§Ã£o para inverter os elementos de uma lista de Inteiros.
{-exemplo-}
Main> inverte [1,2,3,4,5,6,150] = [150,6,5,4,3,2,1]
-}

{-
23. FaÃ§a em Haskell uma soluÃ§Ã£o para, dada uma lista de inteiros, retornar uma dupla de listas de
inteiros onde a primeira conterÃ¡ os elementos Ã­mpares e a segunda os elementos pares passados
como parÃ¢metro.
{-exemplo-}
Main> separa [1,4,3,4,6,7,9,10] = ([1,3,7,9],[4,4,6,10])
-}

{-
24. FaÃ§a em Haskell uma soluÃ§Ã£o para, dada uma lista de inteiros, retornar a string contendo as
letras do alfabeto cuja posiÃ§Ã£o Ã© dada pelos elementos da lista.
{-exemplo-}
Main> converte [1,2,6,1,9] = "ABFAI"
Main> converte [ ] = "".
-}

{-
25. Sabendo que [1..7] Ã© equivalente Ã  lista [1,2,3,4,5,6,7], complete as correspondÃªncias abaixo:
(a) ['a'..'g'] =
(b) [0.1 ..0.9] =
(c) [0.1,0.3 .. 0.9] =
(d) [0.1,0.3 ..1.8] =
(e) [0.4,0.2 ..0.8] =
(f) [1,4..15]
-}

{-
26. FaÃ§a em Haskell uma soluÃ§Ã£o para o seguinte problema: Dada uma lista de caracteres [Char],
e um caractere a, retornar quantos caracteres da lista sÃ£o iguais a a.
{-exemplo-}
Main> conta "ABCAABCDDA" "B" = 2
-}

{-
27. Para uma lista de elementos inteiros ordenada qualquer, faÃ§a uma funÃ§Ã£o que retorne uma lista
de inteiros ordenada sem elementos repetidos.
{-exemplo-}
Main> purifica [1,1,4,5,5,5,6,7,8,8] = [1,4,5,6,7,8]
-}

{-
28. FaÃ§a uma soluÃ§Ã£o em Haskell que, dada uma lista de inteiros, ela retorne uma lista com uma
repetiÃ§Ã£o de cada elemento de acordo com seu valor.
-}

{-
29. FaÃ§a uma soluÃ§Ã£o em Haskell que, dada uma lista de caracteres maiÃºsculos, ela retorne uma
lista com uma repetiÃ§Ã£o de cada elemento de acordo com o valor de sua ordem no alfabeto.
{-exemplo-}
Main> proliferaChar [C,B,D] = "CCCBBDDDD"
-}
